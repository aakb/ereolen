<?php
/**
 * @file
 *
 * Ebog download main module file.
 *
 * Provides extended download workflow for ebooks.
 */

/**
 * Implementation of hook_init.
 */
function ebog_download_init() {
  /**
   * @todo: This JS is add to all pages on the site (WTF!!!!!!).
   */
  $path = drupal_get_path('module', 'ebog_download');

  drupal_add_js($path . '/js/ebog_download_scripts.js');
  drupal_add_js($path . '/js/jquery.form.js');
  drupal_add_css($path . '/css/ebog_download_style.css');
  jquery_ui_add(array('ui.dialog', 'ui.draggable'));
  jquery_ui_theme_load();
}

/**
 * Implementation of hook_menu.
 */
function ebog_download_menu() {
  $menu = array();

  $menu['publizon/%/download/request'] = array(
    'title' => 'Download ting ebook',
    'description' => 'Checker for download abilities regarding selected ebook for specific user.',
    'page callback' => 'ebog_download_loan_initial',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['publizon/%/download/popup'] = array(
    'title' => 'Show a popup before download',
    'description' => 'Display some user specific text and perform some check before download.',
    'page callback' => 'ebog_download_loan_popup',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_theme.
 */
function ebog_download_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['ebog_download_checkboxes'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ebog_download-checkboxes',
  );

  $hooks['ebog_download_error'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ebog_download-error',
  );

  $hooks['ebog_download_info'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/ebog_download-info',
  );

  return $hooks;
}

/**
 * Provides item loan/check routine for elib service.
 *
 * @global $user
 *   Logged in user data
 * @param $ting_id
 *   Ting object id
 */
function ebog_download_loan_initial($isbn) {
  global $user;
  $status = array();

  // Whether user authenticated in drupal
  if ($user->uid) {
    try {
      $loans = new PublizonUserLoans($user->uid);
      if ($loans->isLoan($isbn)) {
        $down_link = $loans->loans[$isbn]->download_url;
        if (!empty($down_link)) {
          $status = array(
            'status' => TRUE,
            'title' => t('Success'),
            'content' => theme('ebog_download_info', array(
              'message' => t('Book download url.'),
              'link' => $down_link,
            )),
          );
        }
        else {
          $status = array(
            'status' => FALSE,
            'title' => t('Error'),
            'content' => theme('ebog_download_error', array(
              'message' => t('Failed to fetch download url.')
            )),
          );
        }
      }
      else {
        // Not a loan, yet.
        $down_link = $loans->createLoan($isbn);

        // If no exception was thrown, the loan went through.
        $status = array(
          'status' => TRUE,
          'title' => t('Success'),
          'content' => theme('ebog_download_info', array(
            'message' => t('Successfuly loaned this item.'),
            'link' => $down_link,
          )),
        );
      }
    }
    catch (Exception $e) {
      $status = array(
        'status' => FALSE,
        'title' => t('Error'),
        'content' => theme('ebog_download_error', array(
          'message' => t('@message', array('@message' => $e->getMessage()))
        )),
      );
    }
  }


  // Send response
  drupal_json($status);
  exit(0);
}

/**
 * More a dummy method, used only for confirmation dialog retrieval.
 *
 * @param $ting_id
 *   Ting object id.
 */
function ebog_download_loan_popup($ting_id) {
  global $user;
  $status = array();

  // Whether user is logged in.
  if ($user->uid) {
    $user_agent = $_SERVER['HTTP_USER_AGENT'];
    $reader = t('Adobe Digital Edition');
    // android - Aldiko Book Reader
    // iPod, iPad, iPhone - Bluefire Reader
    // else - Adobe PDF reader
    if (preg_match('/android/i', $user_agent)) {
      $reader = t('Aldiko Book Reader');
    }
    elseif (preg_match('/(iPod)|(iPad)|(iPhone)/i', $user_agent)) {
      $reader = t('Bluefire Reader');
    }

    $status = array(
      'title' => t('Download ebog'),
      'content' => theme('ebog_download_checkboxes', array('reader' => $reader)),
    );
  }
  else {
     // User was not logged in, so present login form.
    $form = drupal_get_form('elib_popup_login_form');
    $status = array(
      'status' => 'login',
      'title' => t('Login'),
      'content' => $form,
    );
  }

  drupal_json($status);
  exit(0);
}

/**
 * Build popup login form based on the user_login in form used to login normally
 * and overrides the validation functions.
 *
 * @return array $form.
 */
function elib_popup_login_form() {
  $form_id = 'user_login';
  $form_state = array();

  // Get user login form.
  $form = call_user_func_array('drupal_retrieve_form', array($form_id));

  // Run hook_form_alter functions.
  $hook = 'form_alter';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $function($form, $form_state, $form_id);
  }

  // Override validate function.
  $form['#validate'][0] = 'elib_popup_login_form_validate';

  return $form;
}

/**
 * Form validation for popup login form, which returns json.
 */
function elib_popup_login_form_validate($form, &$form_state) {
  // Default status message.
  $status = array(
    'status' => FALSE,
    'title' => t('Error'),
    'content' => '<div class="messages error">' . t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))) . '</div>',
  );

  // If no credentials are presented, return.
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    drupal_json($status);
    exit(0);
  }

  // The user may use both borrower card / cpr number to login, so we have to
  // remove anything thats not an number form the user name.
  $card = preg_replace('/\D+/', '', $form_state['values']['name']);

  // Try to login to the library, this will create the user if login succeed
  // and the user do not exists in Drupal.
  $account = elib_check_credentials($card, $form_state['values']['pass'], $form_state['values']['library']);
  if ($account) {
    global $user;
    $user = $account;
    user_authenticate_finalize($form_state['values']);
    $status = array(
      'status' => 'loggedin',
      'title' => t('Login'),
      'content' => t('You are now logged in an can procceed'),
    );
  }

  drupal_json($status);
  exit(0);
}