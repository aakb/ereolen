<?php

/**
 * @file
 * This module handles communikation witht the eLib web-service (now known as
 * publizon).
 *
 */

/**
 * Implements hook_menu().
 */
function elib_menu() {
  $path = drupal_get_path('module', 'elib') . '/includes';
  $items = array();

  $items['admin/settings/elib'] = array(
      'title' => 'eLib settings',
      'description' => 'settings for eLib SOAP webservice',
      'access arguments' => array('access administration pages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ting_admin_settings_form_elib'),
      'file' => 'elib.admin.inc',
      'file path' => $path,
      'weight' => 2,
  );

  $items['admin/settings/elib/main'] = array(
      'title' => 'eLib',
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['ting/object/%/stream'] = array(
      'title' => 'stream',
      'page callback' => 'elib_get_lydbog',
      'page arguments' => array(2, 3),
      'access arguments' => array('access content'),
  );
  $items['ting/object/%/download'] = array(
      'title' => 'Download materiale',
      'page callback' => 'elib_get_lydbog',
      'page arguments' => array(2, 3),
      'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function elib_theme() {
  return array(
    'page' => array(
      'template' => 'page-clean',
      'arguments' => array(
        'content' => NULL,
        'show_blocks' => TRUE,
        'show_messages' => TRUE,
      ),
    ),
  );
}

/**
 * Implement hook_form_alter().
 *
 * Adds elib user validation to the login form.
 */
function elib_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
      // Login form found, so change labels and description.
      $form['name']['#prefix'] = '<h1>' . t('Welcome to Netlydbog.dk') . '</h1><p>' . t('We noticed that you are not logged in.') . '</p><p>' . t('Please fill in your CPR number + pincode to login.') . '</p>';
      $form['name']['#title'] = t('CPR number');
      $form['pass']['#title'] = t('Pincode');
      $form['name']['#type'] = 'password';

      // Remove default descriptions.
      unset($form['name']['#description']);
      unset($form['pass']['#description']);

      // Add validation function to the front of validation form array.
      array_unshift($form['#validate'], 'elib_login_validate');
  }
}

/**
 * Login validation form that handles login into the library.
 */
function elib_login_validate($form, &$form_state) {
  // If no credentials are presented, return.
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    return;
  }

  // The user may use both borrower card / cpr number to login, so we have to
  // remove anything thats not an number form the user name.
  $card = preg_replace('/\D+/', '', $form_state['values']['name']);

  // Try to login to the library, this will create the user if login succeed
  // and the user do not exists in Drupal.
  $account = elib_check_credentials($card, $form_state['values']['pass'], $form_state['values']['library']);
  if ($account) {
    global $user;
    $user = $account;
    user_authenticate_finalize($form_state['values']);
    drupal_goto('min_side');
  }
}

/**
 * Based on a ting_object_id this function returns the book ISBN number. It does
 * this by loading the ting object from the datawell, so this is an expensive
 * function to get the ISBN number.
 *
 * @param type $ting_object_id
 * @return type
 */
function elib_get_isbn_from_object_id($object_id) {
  module_load_include('client.inc', 'ting');
  module_load_include('isbn_static_func.inc', 'elib');
  try {
    $object = ting_get_object_by_id($object_id);
  } catch (TingClientException $e) {
    // If the specified object id does not exist, an exception is throw.
    return NULL;
  }
  return $object->record['dc:identifier']['oss:PROVIDER-ID'][0];
}

function elib_get_lydbog($tingObjectID, $format) {

  if ($_GET['downloaded']) {

    $out = t('<h1>Hjælp til afspilning</h1>');

    $sql = 'SELECT node.nid AS nid,
     nodequeue_nodes_node.position AS nodequeue_nodes_node_position
   FROM node node
   INNER JOIN nodequeue_nodes nodequeue_nodes_node ON node.nid = nodequeue_nodes_node.nid AND nodequeue_nodes_node.qid = 3
   WHERE node.status <> 0
     ORDER BY nodequeue_nodes_node_position ASC
  		';

    $res = db_query($sql);

    while ($row = db_fetch_array($res)) {

      $n = node_load($row['nid']);

      /* hmm */
      $keys = array_keys($n->taxonomy);
      $tid = $n->taxonomy[$keys[0]];
      $tid = $tid->tid;

      $anchor = $tid . 'n' . $n->nid;

      $items[] = l($n->title, 'faqlist/' . $tid, array("fragment" => $anchor, 'attributes' => array('target' => '_top')));
    }

    $out .= '<div class="ruler-after">' . theme('item_list', $items) . '</div>';

    $out .= '<p>' . l(t('Få mere hjælp'), 'help', array('attributes' => array('target' => '_top '))) . '</p>';

    return $out;
  }



  global $user;
  //no user logged in
  if (!$user->uid) {
    header('Location: /user/login/?' . drupal_get_destination() . '&clean=1');
    exit();
  }
  $userinfo = elib_user_get_cred();

  if (!$userinfo['cpr']) {
    $out = '<h1>Mangler eLIB tilknytning</h1>';
    $out .= t('<p>Der er ikke knyttet nogle elib informationer til den bruger du er logget ind med. Det er højstsansyneligt fordi du er logget ind som redaktør eller administrator. Hvis dette ikke er tilfældet, kontakt !email</p>', array('!email' => l('info@ereolen.dk', 'info@ereolen.dk')));

    return $out;
  }

  $isbn = elib_get_isbn_from_object_id($tingObjectID);

  // verify user
  elib_client()->setLoaner($userinfo['cpr'], $userinfo['pin'], $userinfo['lib']);

  // kig om bogen allerede er lånt GetLibraryUserOrder
  // get all the books that are loaned!
  $loans = elib_client()->getLoans();

  if ($loans->status->code == 101) {
    if ($loans->status->usersoundloansNexttime != '') {
      $loanlimit = elib_str_to_time($loans->status->usersoundloansNexttime, true);
    } else {
      $loanlimit = time() + 3600 + (3600 * 24 * 30);
    }
  }

  $loans = $loans->data->orderitem;

  $alreadyloaned = false;
  /* $loanlimit = 1000000000000; */

  // var_dump($loans);

  if ($loans) {
    $nob = sizeof($loans);
    foreach ($loans as $obj) {

      if ($loanlimit > elib_str_to_time($obj->loanexpiredate, true)) {
        $loanlimit = elib_str_to_time($obj->loanexpiredate, true);
      }

      if (trim($obj->book['idtype']) == 'ISBN') {
        if (trim($obj->book['id']) == $isbn) {

          $response = elib_client()->GetUrl(intval($obj->retailerordernumber) . '');

          // book is already loaned
          $alreadyloaned = true;
        }
      }
    }
  }
  // There is no loans after all??!?
  /* if($loanlimit == 1000000000000){
    $loanlimit = 3600;
    } */
  if ($alreadyloaned) {

    $pretext = '<h1>Din ebog afspilles nu nedenfor</h1>';
    $src = $response->data->downloadurl;
    if ($format != 'stream') {

      $filesrc = (trim($response->data[1]->files[0]->file));
      if (!empty($filesrc)) {
        // ok ready for download
        $src = $filesrc;
        global $base_root;
        $pretext = '<h1>Vi er ved at generere din ebog.<br/> Vent venligst...</h1><div class="loader"></div><p>Vi er ved at pakke din ebog til en fil</p><p>Problemer med download? Hent filen via <a href="' . $src . '">direkte link</a><p>Når du har gemt filen, tryk næste</p>' . l('Næste', $base_root . request_uri(), array('query' => 'downloaded=1', 'attributes' => array('class' => 'nextknap knap')));
      } else {
        // hmm, something is up...
        //$pretext = 'whatup? ('.$format.') ' . $src ;
        $format = 'info';
        $pretext = '';
      }

      // this should never happen.
      if (empty($src)) {
        $pretext = '<h1>FEJL</h1><p>Der returneres ikke nogen download url fra eLib webservicen.</p>';
      }
    }

    // Check if debug message should be logged.
    $logging = variable_get(elib_enable_logging, FALSE);
    if ($logging) {
      watchdog('elib', 'eLib download src: @src - @response', array(
        '@src' => $src,
        '@response' => var_export($response, true), WATCHDOG_DEBUG));
    }

    $content = $pretext;
    $content .= '<iframe src="' . $src . '" class="audioplayer-' . $format . '" frameborder="0" scrolling="no"></iframe>';
  } else {

    $loaned = $nob;
    $max = elib_libraries_get_maxloans($userinfo['lib']) - $nob;

    if ($max <= 0) {

      $libmax = elib_libraries_get_maxloans($userinfo['lib']);
      //if($nob >= $libmax){
      $diff = $loanlimit - time();
      $days = floor($diff / 86400);

      $rest = $diff % 86400;

      $hours = floor($rest / 3600);

      $content = t('<h1>Max grænse for lån opnået</h1>');
      $content .= t("<p>Du har allerede lånt %books og har derfor nået dit maximum</p><p>Læs mere om <a href='!link' target='_top'>antal af lån</a> om måneden</p>", array('%books' => format_plural($nob, 'en bog', '@count bøger'), '!link' => '/node/5175'));
      $content .= t('<p>Du kan låne en ebog igen om</p><div class="timeleft"> %dage og %time</div>', array('%dage' => format_plural($days, 'en dag', '@count dage'), '%time' => format_plural($hours, 'en time', '@count timer')));
      $content .= '<p>' . netsound_cart_add_link($tingObjectID) . '</p>';


      return $content;
    }

    if (!$_GET['confirm']) {

      global $base_root;
      //krumo(request_uri());



      $loaned = $loaned ? format_plural($loaned, 'en lånt ebog', '@count lånte ebøger') : t('ikke lånt nogen bøger');

      return '<h1>Lån denne ebog?</h1><p>' . t('Du har %loaned og kan pt. låne %max.', array('%loaned' => $loaned, '%max' => format_plural($max, 'en mere', '@count til'))) . '</p>' . l('Ok', $base_root . request_uri(), array('query' => 'confirm=1', 'attributes' => array('class' => 'okknap'))) . l('Fortryd', $base_root . request_uri(), array('attributes' => array('class' => 'annullerknap')));
    }


    $response = elib_client()->makeLoan($isbn);
    if ($response->status->code == 120) {
      // else show cart
      $libmax = elib_libraries_get_maxloans($userinfo['lib']);
      //if($nob >= $libmax){
      $diff = $loanlimit - time();
      $days = floor($diff / 86400);

      $rest = $diff % 86400;

      $hours = floor($rest / 3600);

      $content = t('<h1>Max grænse for lån opnået</h1>');
      $content .= t("<p>Du har allerede lånt %books og har derfor nået dit maximum</p><p>Læs mere om <a href='!link'>antal af lån</a> om måneden</p>", array('%books' => format_plural($nob, 'en bog', '@count bøger')));
      $content .= t('<p>Du kan låne en ebog igen om</p><div class="timeleft"> %dage og %time</div>', array('%dage' => format_plural($days, 'en dag', '@count dage'), '%time' => format_plural($hours, 'en time', '@count timer')));
      $content .= '<p>' . netsound_cart_add_link($tingObjectID) . '</p>';

      //$content .= 	t('<p>Lån igen om %s dage</p>',);
      //}
    } else {

      //var_dump($response);
      if ($response->status->code == 101) {
        $src = $response->data->downloadurl;
        $pretext = '<h1>Din ebog afspilles nu nedenfor</h1>';
        if ($format != 'stream') {
          $src = (trim($response->data[1]->files[0]->file));
          global $base_root;
          $pretext = '<h1>Vi er ved at generere din ebog.<br/> Vent venligst...</h1><div class="loader"></div><p>Vi er ved at pakke din ebog til en fil</p><p>Når du har gemt filen, tryk næste</p>' . l('Næste', $base_root . request_uri(), array('query' => 'downloaded=1', 'attributes' => array('class' => 'nextknap knap')));
        }

        $content = $pretext;
        $content .= '<iframe src="' . $src . '" class="audioplayer-' . $format . '" scrolling="no"></iframe>';
      }
    }

    //krumo($response );
    // call create loan
    // if loan show stream and create local
    //$status = $response->status->code.': '.$response->status->message;
  }
  $status = t($response->status->code . ': ' . $response->status->message);
  //krumo($response);
  // hvis ikke bogen er lånt, så CreateLoan og opret lokal kopi i tabel elib_loan
  // ellers så hent lokal URL
  if ($response->status->code != 101) {
    $content .= '<div class="status">Fejl: ' . $status . '</div>';
  }

  return $content;
}

function elib_str_to_time($str, $aststamp = false) {
  list($d, $t) = explode(" ", $str);
  list($r['y'], $r['m'], $r['d']) = explode("-", $d);
  list($r['h'], $r['i'], $r['s']) = explode(":", $t);
  if ($aststamp) {
    return mktime($r['h'], $r['i'], $r['s'], $r['m'], $r['d'], $r['y']);
  }
  return $r;
}

function elib_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
        'account' => array(
            'info' => t('Login through eLib'),
            'cache' => BLOCK_NO_CACHE,
            'status' => 1,
            'region' => 'account',
        ),
    );
  } elseif ($op == 'view' && $delta == 'account') {
    global $user;
    $block = array();

    // If user is not logged in, display the login form.
    if (!$user->uid) {
      $block['content'] = drupal_get_form('user_login_block');
    } else {
      $block['content'] = 'LOGIN HERE!';

      //$block['content'] = theme('alma_user_status_block', $status);
    }

    return $block;
  }
}

/* init elib client as singleton */

function elib_client() {
  global $user;
  static $client;
  global $testuser;

  if (!isset($client)) {
    $path = drupal_get_path('module', 'elib');
    include($path . '/lib/class.eLibClient.php');

    module_load_include('isbn_static_func.inc', 'elib');

    $client = new eLibClient(variable_get('elib_language_code', ''));
    $client->base_url = variable_get('elib_base_url_wsdl', '');
  }
  return $client;
}

function elib_displaybook(TingClientObject $object, $elib_data = false) {
  $image_url = elib_book_cover($object->record['dc:identifier']['oss:PROVIDER-ID'], '65_x');
  $item_url = 'ting/object/' . (string) $object->id;

  $out = array();
  $out[] = '<div class="left">';
  $out[] = '<div class="picture">' . l(theme('image', $image_url, '', '', null, false), $item_url, array('html' => true)) . '</div>';

  $out[] = '</div>';

  $out[] = '<div class="right">';

  $out[] = '<h3 class="title">' . l($object->record['dc:title'][''][0], $item_url, array('attributes' => array('class' => 'title'))) . '</h3>';
  $out[] = '<div class="author">' . t('!author', array('!author' => _elib_get_author($object))) . '</div>';
  $out[] = '<div class="rating-for-faust"><div class="' . $object->localId . '"></div></div>';

  if ($elib_data->loanexpiredate) {
    $loanlimit = elib_str_to_time($elib_data->loanexpiredate, true);
    $diff = $loanlimit - time();
    $days = floor($diff / 86400);
    $hours = floor($diff / 3600);
    $extra = $hours + 24;
  }

  $NotReloanable = ((int) $elib_data->loanstate == 1);
  $Reloanable = ((int) $elib_data->loanstate == 2);
  $ExpiredButReloanable = ((int) $elib_data->loanstate == 3);

  if (($NotReloanable) || ($Reloanable)) {
    if ($days < 1) {
      if ($extra <= 24) {
        $out[] = '<div class="loanperiod short">' . t('Loan expired. You can re-loan.') . '</div>';
      }
      else {
        $out[] = '<div class="loanperiod short">' . t('Loan expires in %hours', array('%hours' => format_plural($hours, 'one hour.', '@count hours.'))) . '</div>';
      }
    }
    else {
      $out[] = '<div class="loanperiod short">' . t('Loan expires in %days', array('%days' => format_plural($days, 'one day.', '@count days'))) . '</div>';
    }
  }
  else if ($ExpiredButReloanable) {
    $out[] = '<div class="loanperiod short">' . t('Loan expired. You can re-loan.') . '</div>';
  }

  $out[] = '
      <div class="icons">
        <div class="icons">
          <ul>';
  if (($Reloanable) || ($ExpiredButReloanable)) {
    $out[] = '<li class="seperator"></li>
              <li>' . l(t('Re-loan'), $item_url . '/download', array('html' => true, 'attributes' => array('rel' => 'lightframe', 'class' => 're-loan'))) . '</li>';
  }
  $out[] = '</ul></div></div></div>';

  return implode($out);
}

/**
 * Render book display when not ting object is avaliable. It is mainly used by
 * the loans list when object is loaned but not in the data well any more.
 *
 * @return string
 */
function elib_displaybook_loan($loan = false) {
  $image_url = elib_book_cover((int)$loan->book->attributes()->id, '65_x');

  $out = array();
  $out[] = '<div class="left">';
  $out[] = '<div class="picture">' . theme('image', $image_url, '', '', null, false) . '</div>';

  $out[] = '</div>';

  $out[] = '<div class="right">';

  $out[] = '<h3 class="title">' . check_plain((string)$loan->book->title) . '</h3>';

  $author = check_plain((string)$loan->book->authors->author[0]->attributes()->name);
  $out[] = '<div class="author">' . t('!author', array('!author' => l($author, 'ting/search/' . $author))) . '</div>';

  if ($loan->loanexpiredate) {
    $loanlimit = elib_str_to_time($loan->loanexpiredate, true);
    $diff = $loanlimit - time();
    $days = floor($diff / 86400);
    $hours = floor($diff / 3600);
    $extra = $hours + 24;
  }

  $NotReloanable = ((int) $loan->loanstate == 1);
  $Reloanable = ((int) $loan->loanstate == 2);
  $ExpiredButReloanable = ((int) $loan->loanstate == 3);

  if (($NotReloanable) || ($Reloanable)) {
    if ($days < 1) {
      if ($extra <= 24) {
        $out[] = '<div class="loanperiod short">' . t('Loan expired. You can re-loan.') . '</div>';
      }
      else {
        $out[] = '<div class="loanperiod short">' . t('Loan expires in %hours', array('%hours' => format_plural($hours, 'one hour.', '@count hours.'))) . '</div>';
      }
    }
    else {
      $out[] = '<div class="loanperiod short">' . t('Loan expires in %days', array('%days' => format_plural($days, 'one day.', '@count days'))) . '</div>';
    }
  }
  else if ($ExpiredButReloanable) {
    $out[] = '<div class="loanperiod short">' . t('Loan expired. You can re-loan.') . '</div>';
  }

  $out[] = '<div class="book-not-available">';
  $out[] = t('This book is no longer available and can not be downloaded.');
  $out[] = '</div>';

  $out[] = '</div>';

  return implode($out);
}

function elib_displaybookNEW($obj, $elib = '', $displaysize = false, $block_index = 1) {
  if (!is_a($obj, 'TingClientObject')) {
    return;
  }
  $obj->url = 'ting/object/' . $obj->id;

  // Get book information form elib, such as sample link etc.
  $client = elib_client();
  $client->setLibrary(variable_get('elib_retailer_id', ''));
  $book = $client->getBook($obj);
  if ($book->status->code == 101 && isset($book->data->teaser->link)) {
    $elib_sample_link = (string)$book->data->teaser->link;
  }

  switch ($displaysize) {
    case 'small':
    case 'small_rm':
    case 'lorem':
    case 'review':
      $image_url = elib_book_cover($obj->record['dc:identifier']['oss:PROVIDER-ID'], '65_x');
      break;
    case 'medium':
    case 'textright':
      $image_url = elib_book_cover($obj->record['dc:identifier']['oss:PROVIDER-ID'], '170_x');
      break;
  }

  // Default action links.
  $action_links = array();
  $action_classes = array();
  if (isset($elib_sample_link)) {
    $action_links[] = l(t('Sample'), $elib_sample_link, array('html' => true, 'attributes' => array('target' => '_blank', 'action' => 'sample')));
    $action_classes[] = 'sample';
    $action_links[] = l(t('Loan'), $obj->url . '/download', array('html' => true, 'attributes' => array('rel' => 'lightframe')));
    $action_classes[] = 'loan';
  }
  else {
    $action_links[] = '<span>' . t('Unavailable') . '</span>';
    $action_classes[] = 'unavailable';
  }
  if ($displaysize == 'small_rm') {
    $action_links[] = l(t('Remove'), $obj->url . '/huskeliste/fjern', array('html' => true, 'query' => drupal_get_destination()));
    $action_classes[] = 'remove';
  }
  if (isset($elib_sample_link)) {
    $action_links[] = l(t('Buy'), 'butik', array('html' => true, 'attributes' => array('action' => 'deactivated')));
    $action_classes[] = 'deactivated';
  }

  $alttext = t('@titel af @forfatter', array('@titel' => $obj->record['dc:title'][''][0], '@forfatter' => _elib_get_author($obj, FALSE)));
  $part['picture'] = '<div class="picture">' . l(theme('image', $image_url, $alttext, $alttext, null, false), $obj->url, array('html' => true)) . '</div>';
  if ($elib_data->loanexpiredate) {
    $loanlimit = elib_str_to_time($elib_data->loanexpiredate, true);
    $diff = $loanlimit - time();
    $days = floor($diff / 86400);
    $loanperiod_class = 'short';
    $part['loginexpire'] = '<div class="loanperiod ' . $loanperiod_class . '">' . t('Lånet udløber om <div>%days', array('%days' => format_plural($days, 'en dag', '@count dage'))) . '</div></div>';
  }

  $part['rating'] = '<div class="rating-for-faust"><div class="' . $obj->localId . '"></div></div>';
  $part['title'] = '<h3 class="title">' . l($obj->record['dc:title'][''][0], $obj->url, array('attributes' => array('class' => 'title'))) . '</h3>';
  $part['author'] = '<div class="author">' . t('!author', array('!author' => _elib_get_author($obj))) . '</div>';
  $part['icons'] = elib_create_icons($action_links, $action_classes);

  if ($displaysize == 'review') {
    $u = elib_user_get_cred($elib[1]);
    $part['text'] = '<div class="spacing-before" style="text-transform:uppercase;">Anmelder</div><div>' . $u['user'] . '</div><div class="text"  style="margin-left:80px;"><p class="spacing-before">' . truncate_utf8($elib[0], 400, true, true) . ' ' . l('LÆS MERE →', $obj->url) . '</p>';
    $part['icons'] = elib_create_icons($action_links, $action_classes);
    $part['picture'] = '<div class="picture">' . l(theme('image', $image_url, $alttext, $alttext, null, false), $obj->url, array('html' => true)) . '</div>';
    $displaysize = 'small';
  }

  if ($displaysize == 'textright') {
    #error_log(__FILE__ . ' +' . __LINE__ . ' ' . print_r($obj->record, 1));
    $part['picture'] = '<div class="picture main size1of2">' . l(theme('image', $image_url, $alttext, $alttext, null, false), $obj->url, array('html' => true)) . '</div>';
    $part['author'] = '<div class="author">' . t('By !author', array('!author' => _elib_get_author($obj))) . '</div>';

    return '
      <div class="display-book ' . $displaysize . ' line">' .
            $part['picture'] .
            '<div class="main size1of2">' .
            $part['loginexpire'] .
            $part['title'] .
            $part['author'] .
            $part['rating'] .
            $part['icons'] .
            $part['text'] .
            $extras .
            '</div>
      </div>
    ';
  }


  if ($elib['popular']) {
    if (!empty($obj->record['dc:contributor'][''])) {
      foreach ($obj->record['dc:contributor'][''] as $reader) {
        $readers[] = l($reader, 'ting/search/' . $reader);
      }
      $extras = theme('item_list', $readers, t('Reader'), 'span', array('class' => 'contributor'));
    }
    if (!empty($obj->record["dc:subject"]["dkdcplus:DBCF"])) {
      foreach ($obj->record["dc:subject"]["dkdcplus:DBCF"] as $subject) {
        $subs[] = l($subject, 'ting/search/' . $subject);
      }
    }
    $part['icons'] = $part['icons'] = elib_create_icons($action_links, $action_classes);
  }

  if ($displaysize == 'small_rm') {
    $displaysize = 'small';
    $part['icons'] = elib_create_icons($action_links, $action_classes);
  }

  $part['icons'] = '<div class="icons">' . $part['icons'] . '</div>';
  return '<div class="display-book ' . $displaysize . ' line ruler-after index-' . $block_index . '">
    <div class="left">' .
          $part['picture'] .
          '</div>
    <div class="right">' .
          $part['loginexpire'] .
          $part['title'] .
          $part['author'] .
          $part['rating'] .
          $part['icons'] .
          $part['text'] .
          '<div class="extras" style="margin-left:80px;">' . $extras . '</div>
    </div>
  </div>';
}

/**
 * Helper function to create action links.
 *
 * @todo: this should be moved to theme function.
 *
 * @param array $links
 */
function elib_create_icons(array $links, array $classes) {
  $output = '<div class="icons"><ul>';
  $count = count($links);
  for ($i = 0; $i < $count; $i++) {
    $output .= '<li class="' . $classes[$i] . '">' . $links[$i] . '</li>';

    // Add seperator except for the last one.
    if ($i != count($links) - 1) {
      $output .= '<li class="seperator"></li>';
    }
  }
  $output .= '</ul></div>';

  return $output;
}

function elib_display_error($error) {
  // singleton display error
  static $isset;

  if (!$isset) {
    drupal_set_message(t('Oops! We cound\'nt connect to the library') . '<div class="spec" style="font-size:.7em">' . t($error->getMessage()) . '</div>', 'error');
    $isset = true;
  }
}

function elib_get_rating($objectid) {

  /* if node dosent exist, there is no rating, skip this function */
  if (!$n = node_load(array('title' => $objectid, 'type' => 'bookrating'))) {
    return;
  }

  $c = node_build_content($n, true);

  return $c->content['fivestar_widget']['#value'];
}

/**
 * Getting a cover form eLib WS by ISBN
 *
 * @param array $isbns
 * @param string $presetname
 * @return string
 */
function elib_book_cover($isbns, $presetname, $always_download = FALSE) {
  // Look in the ISBNs to find if image have been downloaded.
  if (is_array($isbns)) {
    foreach ($isbns as $isbn) {
      $path = _elib_cover_cache_get($isbn);
      if ($path) {
        return imagecache_create_url($presetname, $path);
      }
    }
  }
  else {
    $path = _elib_cover_cache_get($isbn);
    if ($path) {
      return imagecache_create_url($presetname, $path);
    }
    $isbns = array($isbns);
  }

  // No image found try elib client and featch one.
  $c = elib_client();
  $c->setLibrary(variable_get('elib_retailer_id', ''));
  // fetch book from elib by isbn
  try {
    foreach ($isbns as $isbn) {
      if (preg_match('/^[0-9]{13}/', $isbn)) {
        // Check if local copy if the image exists.
        $path = file_directory_path() . '/' . elib_init_cover_path($isbn);
        if ((!$always_download) && file_exists($path)) {
          _elib_cover_cache_set($path, $isbn);
          return imagecache_create_url($presetname, $path);
        }

        // No Local copy found so go fetch a new one.
        $book = $c->getBook($isbn);
        if (isset($book->data->coverimage)) {
          $path = _elib_covers_fetch_or_redirect($path, (string) $book->data->coverimage);
          _elib_cover_cache_set($path, $isbn);
          return imagecache_create_url($presetname, $path);
        }
      }
    }
  } catch (Exception $e) {
    // Default image will be returned below.
  }

  return imagecache_create_url($presetname, _elib_covers_default_image());
}

/**
 * Help function, returns path to default image.
 */
function _elib_covers_default_image() {
  return drupal_get_path('module', 'ting_covers') . '/img/default.gif';
}

/**
 * Support method to get default cover (from ting_cover) or ask for real cover
 */
function _elib_covers_fetch_or_redirect($path, $source_url) {
  if ($source_url && filter_var($source_url, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)) {
    $path = _elib_covers_pages_fetch_image($path, $source_url);
    if ($path) {
      return $path;
    }
  }
  return _elib_covers_default_image();
}

/**
 * Help method to get cover from elib and store it locally
 */
function _elib_covers_pages_fetch_image($path, $image_url) {
  // check if the init cover is already stored localy
  $result = drupal_http_request($image_url);

  if ($result->code == 200) {
    // get the folder for the final location of this preset...
    $dir = file_directory_path() . '/' . dirname($path);
    // Build the destination folder tree if it doesn't already exists.
    if (!file_check_directory($dir, FILE_CREATE_DIRECTORY) && !mkdir($dir, 0775, TRUE)) {
      return 0;
    }
    return file_save_data($result->data, $path, FILE_EXISTS_REPLACE);
  }
}

/**
 * Get a path to stored cover
 */
function elib_init_cover_path($isbn) {
  return 'elib/covers/' . md5($isbn) . '.jpg';
}

/**
 * Fetch single ting object by isbn.
 *
 * @param String $isbn
 *   Item isbn number.
 * @param Boolean $enrich
 *   Whether to add additional info to the response.
 * @return Object
 *   Ting item object
 */
function elib_get_ting_object_by_isbn($isbn, $enrich = FALSE) {
  $request = ting_get_request_factory()->getSearchRequest();
  $request->setQuery('(dc.identifier=' . $isbn . ')');
  $request->setNumResults(1);

  $request = ting_add_agency($request);
  $request = ting_add_profile($request);

  $r = ting_execute($request);
  $object = isset($r->collections[0]->objects[0]) ? $r->collections[0]->objects[0] : FALSE;

  return $object;
}

/**
 * Implements hook_flush_caches().
 *
 * Flush local cover cache, which will be rebuild base on local file system and
 * covers fetch from the web-service.
 */
function elib_flush_caches() {
  return array('cache_elib_cover');
}

/**
 * Helper function to store rendered "remember" lists based on user ID.
 *
 * @param type $data
 * @param type $isbn
 */
function _elib_cover_cache_set($data, $isbn) {
  cache_set($isbn,  $data, 'cache_elib_cover');
}

/**
 * Helper function to retrive rendered "remember" lists based on user ID.
 *
 * @param type $isbn
 * @param type $reset
 * @return boolean
 */
function _elib_cover_cache_get($isbn, $reset = FALSE) {
  if (!$reset && ($cache = cache_get($isbn, 'cache_elib_cover')) && !empty($cache->data)) {
    return $cache->data;
  }
  return FALSE;
}

/**
 * Extract the name(s) of the author on a ting object.
 *
 * @param object $ting_object
 * @param bool $link
 *  If the parameter is true the authors returned is search links else plain
 *  text.
 * @return string
 *  The authors found and the empty string if non is found.
 */
function _elib_get_author($ting_object, $link = TRUE) {
  $authors = '';
  if (isset($ting_object->record["dc:creator"]["dkdcplus:aut"][0])) {
    if ($link) {
      $authors = l($ting_object->record["dc:creator"]["dkdcplus:aut"][0], 'ting/search/' . $ting_object->record["dc:creator"]["dkdcplus:aut"][0]);
    }
    else {
      $authors = $ting_object->record["dc:creator"]["dkdcplus:aut"][0];
    }
  }
  else {
    // Find all authors involed.
    $contributors = array();
    if (isset($ting_object->record['dc:contributor']['dkdcplus:edt'])) {
      $contributors = array_merge($contributors, $ting_object->record['dc:contributor']['dkdcplus:edt']);
    }
    if (isset($ting_object->record['dc:contributor']['dkdcplus:aut'])) {
      $contributors = array_merge($contributors, $ting_object->record['dc:contributor']['dkdcplus:aut']);
    }

    // Loop over the authors and create the string.
    sort($contributors);
    foreach ($contributors as $contributor) {
      if ($link) {
        $authors .= l($contributor, 'ting/search/' . $contributor) . ', ';
      }
      else {
        $authors .= $authors . ', ';
      }
    }
    $authors = substr($authors, 0, -2);
  }

  return $authors;
}