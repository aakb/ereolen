<?php

/**
 * @file
 * This module is used to make alterations that is not possible to do form
 * inside the theme. Such as chaning cacheing header etc.
 *
 */

/**
 * Set max-age for pages that are cacheable, when not in external cache
 * mode. This allows us to cache pages in varnish at the same time use
 * Drupal pages cache for https requests.
 */
function ereolen_admin_init(){
  $cache_mode = variable_get('cache', CACHE_DISABLED);
  if (drupal_page_is_cacheable() && $cache_mode != CACHE_EXTERNAL) {
    $max_age = variable_get('page_cache_max_age', 0);
    drupal_set_header('Cache-Control', 'public, max-age=' . $max_age);
  }
}

/**
 * Implments hook_ting_client_request_alter().
 *
 * Make sure that we get all relations and that we only get valided e-books.
 */
function ereolen_admin_ting_client_request_alter(&$request) {
  if (is_a($request, 'TingClientSearchRequest')) {
    $request->setQuery('( ' . $request->getQuery() . ' )');
    $request->setAllRelations(TRUE);
    $request->setRelationData('full');
  }
}

/**
 * Implments hook_ting_client_reponse_alter().
 *
 * Get publisher description for the object being viewed. A better solution
 * would be to modify the ting client to enrich the object with relations. But
 * to use a clean client we load it in this alter function.
 */
function ereolen_admin_ting_client_response_alter(&$reponse) {
  if (is_a($reponse, 'TingClientObject')) {
    $reponse->publisherDescription = ereolen_admin_get_relations($reponse);
  }
  if (is_a($reponse, 'TingClientSearchResult') && $reponse->numTotalObjects > 0) {
    foreach ($reponse->collections as &$collection) {
      foreach ($collection->objects as &$object) {
        $object->publisherDescription = ereolen_admin_get_relations($object);
      }
    }
  }
}

function ereolen_admin_get_relations(TingClientObject $object, $reset = FALSE) {
  if (!empty($object->relationsData)) {
    foreach ($object->relationsData as $relation) {
      if ($relation->relationType == 'dbcaddi:hasDescriptionFromPublisher') {
        // Check if cached description is available.
        if (!$reset && $cache = cache_get($object->id . ':PUBDESC', 'cache')) {
          return $cache->data;
        }

        // No cached description found, so search the data well for a publisher
        // description.
        $request = ting_get_request_factory()->getObjectRequest();
        $request->setObjectId($relation->relationUri);
        $request->setProfile(variable_get('ting_profile', 'opac'));
        $request->setFormat('docbook');
        $request->setObjectFormat('docbook');
        $request->setOutputType('xml');
        $xml_string = ting_execute($request);

        // Parse XML and get docbook namespace with the publisher description.
        $xml = simplexml_load_string($xml_string);
        $xml_object = $xml->result->searchResult->collection->object;
        $namespaces = $xml_object->getNameSpaces(true);
        $docbook = $xml_object->children($namespaces['docbook']);
        $description = (string)$docbook->article->section->para;

        //Filter the description to make it usable.
        $description = _filter_autop($description);
        $description = preg_replace('/<p>([\w\s]+\:)<br \/>/', '<p><span class="section">$1</span></br>', $description);

        // Cache the result for 2 days (yes it should be configureable).
        cache_set($object->id . ':PUBDESC', $description, 'cache', time() + 172800);

        return $description;
      }
    }
  }

  return NULL;
}

/**
 * Implements hook_page_alter().
 *
 * We want to provide more detail to New Relic on the transaction and late in
 * the page build seemed like the simplest place.
 */
function ereolen_admin_preprocess_page(&$variables) {
  if (!extension_loaded('newrelic')) {
    return;
  }

  $name = NULL;

  // Look for a panel page...
  $panel_page = page_manager_get_current_page();
  if (isset($panel_page['name'])) {
    // If it's a node page put the argument's node type into the transaction
    // name.
    if ($panel_page['name'] == 'node_view') {
      if (isset($panel_page['contexts']['argument_nid_1']->data)) {
        $node = $panel_page['contexts']['argument_nid_1']->data;
        $name = 'page_manager_node_view_page/' . $node->type;
      }
    }
    // If it's a page_manager page use the panel name.
    else if ($panel_page['task']['task type'] == 'page') {
      $name = 'page_manager_page_execute/' . $panel_page['name'];
    }
  }
  else {
    $menu_item = menu_get_item();
    if ($menu_item['path'] == 'node/%') {
      // Looks like panels didn't have a variant and it's falling back to
      // node_page_view.
      $name = 'node_page_view/' . $menu_item['page_arguments'][0]->type;
    }
  }

  if ($name) {
    newrelic_name_transaction($name);
  }
}


/**
 * Implements hook_preprocess_publizon_actions().
 *
 * THIS IS ONLY TEMP AND SHOULD BE REMOVED WHEN APP IS LAUNCHED.
 */
function ereolen_admin_preprocess_publizon_actions(&$vars) {
  if (!ebog_offline_is_app() && ($vars['type'] == 'loan' || isset($vars['product']->teaser_link))) {
    $isbn = $vars['product']->isbn;
    $vars['actions'][] =  array(
      '#link' => l(t('Download'), 'publizon/' . $isbn . '/download', array('html' => TRUE, 'attributes' => array('class' => 'loan'))),
      '#class' => 'download',
      '#weight' => 2,
    );

    // Re-sort the actions based on weight.
    usort($vars['actions'], 'element_sort');
  }
}