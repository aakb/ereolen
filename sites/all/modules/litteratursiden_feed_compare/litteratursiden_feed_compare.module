<?php
/**
 * @file
 *
 */


/**
 * Implementation of hook_menu().
 */
function litteratursiden_feed_compare_menu() {
  $items = array();
  $items['admin/settings/litteratursiden_feed_compare'] = array(
    'title' => 'litteratursiden feed compare title',
    'description' => t('litteratursiden feed compare descr'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('litteratursiden_feed_compare_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'litteratursiden_feed_compare.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function litteratursiden_feed_compare_theme() {
  return array(
    'litteratursiden_feed_compare_front' => array(
      'arguments' => array('items' => NULL),
      'template' => 'litteratursiden_feed_compare_front'
    ),
    'litteratursiden_feed_compare_page' => array(
      'arguments' => array('items' => NULL),
      'template' => 'litteratursiden_feed_compare_page'
    ),
  );
}

/**
 * Get cached search result from feed-to-TING search/parse process.
 */
function litteratursiden_feed_compare_get_cached_feed($items) {

  $lifetime = variable_get('litteratursiden_feed_compare_cache_lifetime', '360');

  $cache = cache_get('litteratursiden_feed_compare_cache');
  if (empty($cache->data)) {
    $ret = litteratursiden_feed_compare_get_feed($items);
    cache_set('litteratursiden_feed_compare_cache', serialize($ret), 'cache', time() + $lifetime);
  }
  else {
    $ret = unserialize($cache->data);
  }

  return $ret;

}

/**
 * Convert TING object to array for serializing in cache.
 */
function litteratursiden_feed_compare_object_to_array($object) {
  $array=array();
  foreach ($object as $member => $data) {
    $array[$member] = $data;
  }
  return $array;
}


/**
 * Gets feed from litteratursiden.dk and performs search in TING datawell.
 */
function litteratursiden_feed_compare_get_feed($items) {

  module_load_include('client.inc', 'ting');
  module_load_include('isbn_static_func.inc', 'elib');

  $c = elib_client();
  $c->setLibrary(variable_get('elib_retailer_id', ''));

  $ret = array();
  $i = 0;
  $amo = 0;
  $feed_main_url = variable_get('litteratursiden_feed_compare_feed_url', 'http://www.litteratursiden.dk/service/recommendations');

  while ($i != 25) {
    $feed_url = $feed_main_url . '?count=25&offset=' . $i*25;
    $feed_json_data = file_get_contents($feed_url, TRUE);
    $feed = json_decode($feed_json_data, TRUE);
    foreach ($feed as $key => $val) {
      if (is_numeric($key)) {
        $query = "dc.title='" . $val['title'] . "'";
        $search = ting_do_search($query, 1, 25);
        if ($search->numTotalObjects > 0) {
          foreach ($search->collections as $collection) {
            foreach ($collection->objects as $object) {
              $isbn = $object->record['dc:identifier']['dkdcplus:ISBN'][0];
              if (!empty($isbn)) {
                // Title from feed consists of title+author.
                // Combine title and author from TING to perform reasonable search.
                $source = $object->record['dc:source'][''][0] . ' af ' . $object->record['dc:creator']['oss:aut'][0];
                $title = $object->record['dc:title'][''][0] . ' af ' . $object->record['dc:creator']['oss:aut'][0];
                if ($val['title'] == $source || $val['title'] ==  $title) {
                  try {
                    $book = $c->getBook(convertFromIsbn13ToIsbn10($isbn));
                  }
                  catch (Exception $e) {
                    $ret['status'] = 'error';
                    $ret['message'] = $e;
                    return $ret;
                  }
                  if (!empty($book->data)) {
                    $book_obj = json_decode(json_encode($book));
                    $ret['data'][$amo] = array();
                    $ret['data'][$amo]['isbn'] = $book_obj->data->product->external_ids->external_id[1]->id;
                    $ret['data'][$amo]['title'] = $book_obj->data->product->title;
                    $ret['data'][$amo]['author'] = $book_obj->data->product->contributors->contributor[0]->first_name . ' ' . $book_obj->data->product->contributors->contributor[0]->family_name;
                    $ret['data'][$amo]['description'] = $book_obj->data->product->description;
                    $ret['data'][$amo]['image_url'] = $book_obj->data->product->coverimage;
                    $amo++;
                  }
                }
              }
            }
          }
        }
      }
      if ($amo != $items && $amo > 0) {
        $ret['status'] = 'notfull';
      }
      elseif ($amo == $items) {
        $ret['status'] = 'ok';
        break 2;
      }
      else {
        $ret['status'] = 'empty';
      }
    }
    $i++;
  }

  return $ret;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function litteratursiden_feed_compare_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}
